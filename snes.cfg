# ca65 linker config for 256 KiB (2 Mbit) sfc file

# Physical areas of memory
MEMORY {
  # Reserve $000000-$00001F for local variables
  # The rest is open for global variables.
  ZEROPAGE:   start =  $000020, size = $00E0;

  # Make sure to change BSS based on where you put
  # the stack and how big you expect it to get.
  # Unlike on the NES, we include shadow OAM in BSS here
  # because there's not as much of a benefit to having it
  # page-aligned.
  BSS:        start =  $000200, size = $1E00;
  BSS7E:      start =  $7E2000, size = $E000;
  BSS7F:      start =  $7F0000, size =$10000;
  SRAM1:      start =  $700000, size = $8000;
  

  # The fast ROM area starts at $808000.
  # It's mirrored into the slow ROM area.
  ROM0:       start =  $808000, size = $7FC0, fill = yes;
  HEADER:     start =  $80FFC0, size = $40, fill = yes, fillval = $20;
  ROM1:       start =  $818000, size = $8000, fill = yes;
  ROM2:       start =  $828000, size = $8000, fill = yes;
  ROM3:       start =  $838000, size = $8000, fill = yes;
  ROM4:       start =  $848000, size = $8000, fill = yes;
  ROM5:       start =  $858000, size = $8000, fill = yes;
  ROM6:       start =  $868000, size = $8000, fill = yes;
  ROM7:       start =  $878000, size = $8000, fill = yes;

  ROM8:       start =  $888000, size = $8000, fill = yes;
  ROM9:       start =  $898000, size = $8000, fill = yes;
  ROM10:       start =  $8A8000, size = $8000, fill = yes;
  ROM11:       start =  $8B8000, size = $8000, fill = yes;
  ROM12:       start =  $8C8000, size = $8000, fill = yes;
  ROM13:       start =  $8D8000, size = $8000, fill = yes;
  ROM14:       start =  $8E8000, size = $8000, fill = yes;
  ROM15:       start =  $8F8000, size = $8000, fill = yes;
  
  ROMEMPTY:       start =  $908000, size = $80000, fill = yes; # 8mbit
#  ROMEMPTY:       start =  $908000, size = $180000, fill = yes; # 16mbit

  # The sound processor has its own address space
  SPCZEROPAGE:start =    $0010, size = $00E0;
  #SPCRAM:     start =    $0200, size = $FDC0;
  SPCRAM:     start =    $FE00, size = $01C0;
}

# Logical areas code/data can be put into.
SEGMENTS {
  # Read-only areas for main CPU
  CODE:         load = ROM0,  align = $100;
  RODATA:       load = ROM0,  align = $100;
  REGDATA:      load = ROM0,  start = $80FFB0;
  PROGRAMTITLE: load = HEADER,start = $80FFC0;
  SNESHEADER:   load = HEADER,start = $80FFD5;
  SPCIMAGE:     load = ROM4,  align = $100, optional=yes;
  CODE1:        load = ROM1,  align = $100, optional=yes;
  RODATA1:      load = ROM1,  align = $100, optional=yes;
  CODE2:        load = ROM2,  align = $100, optional=yes;
  RODATA2:      load = ROM2,  align = $100, optional=yes;
  CODE3:        load = ROM3,  align = $100, optional=yes;
  RODATA3:      load = ROM3,  align = $100, optional=yes;
  CODE4:        load = ROM4,  align = $100, optional=yes;
  RODATA4:      load = ROM4,  align = $100, optional=yes;
  CODE5:        load = ROM5,  align = $100, optional=yes;
  RODATA5:      load = ROM5,  align = $100, optional=yes;
  CODE6:        load = ROM6,  align = $100, optional=yes;
  RODATA6:      load = ROM6,  align = $100, optional=yes;
  CODE7:        load = ROM7,  align = $100, optional=yes;
  RODATA7:      load = ROM7,  align = $100, optional=yes;
  ROM8:			load = ROM8,  align = $100, optional=yes;
  ROM9:			load = ROM9,  align = $100, optional=yes;
  ROM10:		load = ROM10, align = $100, optional=yes;
  ROM11:		load = ROM11, align = $100, optional=yes;
  ROM12:		load = ROM12, align = $100, optional=yes;
  ROM13:		load = ROM13, align = $100, optional=yes;
  ROM14:		load = ROM14, align = $100, optional=yes;
  ROM15:		load = ROM15, align = $100, optional=yes;

  # Read-only areas for sound CPU
  #SPCIMAGE:   load = ROM7, run=SPCRAM, align = $100, define=yes;

  # Areas for variables for main CPU
  ZEROPAGE:   load = ZEROPAGE, type = zp, define=yes;
  BSS:        load = BSS, type = bss, align = $100, optional=yes;
  BSS7E:      load = BSS7E, type = bss, align = $100, optional=yes;
  BSS7F:      load = BSS7F, type = bss, align = $100, optional=yes;
  SRAM:       load = SRAM1, type = bss, align = $100, optional=yes;

  # Areas for variables for sound CPU
  SPCZEROPAGE:load = SPCZEROPAGE, type=zp, optional=yes;
  SPCBSS:     load = SPCRAM, type = bss, align = $100, optional=yes;

}
