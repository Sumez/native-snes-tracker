# ca65 linker config for 256 KiB (2 Mbit) sfc file

# Physical areas of memory
MEMORY {
  # Reserve $000000-$00001F for local variables
  # The rest is open for global variables.
  ZEROPAGE:   start =  $000020, size = $00E0;

  # Make sure to change BSS based on where you put
  # the stack and how big you expect it to get.
  # Unlike on the NES, we include shadow OAM in BSS here
  # because there's not as much of a benefit to having it
  # page-aligned.
  BSS:        start =  $000200, size = $1E00;
  BSS7E:      start =  $7E2000, size = $E000;
  BSS7F:      start =  $7F0000, size =$10000;
  SRAM1:      start =  $306000, size = $2000;
  SRAM2:      start =  $316000, size = $2000;
  SRAM3:      start =  $326000, size = $2000;
  SRAM4:      start =  $336000, size = $2000;
  SRAM5:      start =  $346000, size = $2000;
  SRAM6:      start =  $356000, size = $2000;
  SRAM7:      start =  $366000, size = $2000;
  

  # The fast ROM area starts at $808000.
  # It's mirrored into the slow ROM area.
  ROM0DATA:   start =  $800000, size = $8000, fill = yes, fillval = $00;
  ROM0CODE:   start =  $808000, size = $7FC0, fill = yes, fillval = $00;
  HEADER:     start =  $80FFC0, size = $0040, fill = yes, fillval = $20;
  ROM1DATA:   start =  $C10000, size = $8000, fill = yes, fillval = $00;
  ROM1CODE:   start =  $818000, size = $8000, fill = yes, fillval = $00;
  ROM2:		  start =  $C28000, size =$30000, fill = yes, fillval = $00;
  ROM5DATA:   start =  $C50000, size = $8000, fill = yes, fillval = $00;
  ROM5CODE:   start =  $858000, size = $8000, fill = yes, fillval = $00;
  ROM6DATA:   start =  $C60000, size = $8000, fill = yes, fillval = $00;
  ROM6CODE:   start =  $868000, size = $8000, fill = yes, fillval = $00;
  ROM7DATA:   start =  $C60000, size = $8000, fill = yes, fillval = $00;
  ROM7CODE:   start =  $878000, size = $8000, fill = yes, fillval = $00;

  # $C80000 starts at $080000 in ROM
  DATAROM:    start =  $C80000, size = $80000, fill = yes, fillval = $88; # Ending at $D0.0000 = 8MBit. Ending at $100.0000 = 32MBit. More than that requires ExHiRom

  # The sound processor has its own address space
  SPCZEROPAGE: start =    $0010, size = $00E0;
  #SPCRAM:     start =    $0200, size = $FDC0;
  SPCRAM:      start =    $FE00, size = $01C0;
}

# Logical areas code/data can be put into.
SEGMENTS {
  # Read-only areas for main CPU
  CODE:       load = ROM0CODE, align = $100, optional=yes;
  RODATA:     load = DATAROM, align = $100, optional=yes;
  REGDATA:    load = ROM0CODE, start = $80FFB0;
  PROGRAMTITLE: load = HEADER, start = $80FFC0;
  SNESHEADER: load = HEADER, start = $80FFD5;
  SPCIMAGE:	   load = ROM1CODE, align = $100, optional=yes; # Needs to be in a data bank with APU Register access
#  CODE2:      load = ROM2, align = $100, optional=yes;
  RODATA2:    load = DATAROM, align = $100, optional=yes;
#  CODE3:      load = ROM3, align = $100, optional=yes;
  RODATA3:    load = DATAROM, align = $100, optional=yes;
#  CODE4:      load = ROM4, align = $100, optional=yes;
  RODATA4:    load = DATAROM, align = $100, optional=yes;
  CODE5:      load = ROM5CODE, align = $100, optional=yes;
  RODATA5:    load = DATAROM, align = $100, optional=yes;
  CODE6:      load = ROM6CODE, align = $100, optional=yes;
  RODATA6:    load = DATAROM, align = $100, optional=yes;
  CODE7:      load = ROM7CODE, align = $100, optional=yes;
  RODATA7:    load = DATAROM, align = $100, optional=yes;

  # Areas for variables for main CPU
  ZEROPAGE:   load = ZEROPAGE, type = zp, define=yes;
  BSS:        load = BSS, type = bss, align = $100, optional=yes;
  BSS7E:      load = BSS7E, type = bss, align = $100, optional=yes;
  BSS7F:      load = BSS7F, type = bss, align = $100, optional=yes;
  SRAM1:      load = SRAM1, type = bss, align = $100, optional=yes;
  SRAM2:      load = SRAM2, type = bss, align = $100, optional=yes;
  SRAM3:      load = SRAM3, type = bss, align = $100, optional=yes;
  SRAM4:      load = SRAM4, type = bss, align = $100, optional=yes;
  SRAM5:      load = SRAM5, type = bss, align = $100, optional=yes;
  SRAM6:      load = SRAM6, type = bss, align = $100, optional=yes;
  SRAM7:      load = SRAM7, type = bss, align = $100, optional=yes;

  # Areas for variables for sound CPU
  SPCZEROPAGE:load = SPCZEROPAGE, type=zp, optional=yes;
  SPCBSS:     load = SPCRAM, type = bss, align = $100, optional=yes;

}
